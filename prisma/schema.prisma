generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                       String  @id @default(cuid())
    userId                   String  @map("user_id")
    type                     String
    provider                 String
    providerAccountId        String  @map("provider_account_id")
    refresh_token            String?
    access_token             String?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique @map("session_token")
    expires      DateTime
    userId       String   @map("user_id")

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

enum Role {
    ADMIN
    CUSTOMER
    PROFESSIONAL
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime? @map("email_verified")
    image         String?
    password      String?
    role          Role      @default(CUSTOMER)

    accounts              Account[]
    sessions              Session[]
    customer              Customer[]
    editedForms           Form[]
    createdHistories      FormHistory[] @relation("createdByUser")
    professionalHistories FormHistory[] @relation("professional")

    @@map("users")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verificationtokens")
}

model Customer {
    id        String   @id @default(cuid())
    name      String
    rg        String
    cpf       String
    birthdate DateTime
    cellphone String
    howMet    String?  @map("how_met")
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
    userId    String   @map("user_id")
    addressId String   @map("address_id")

    user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
    address       Address       @relation(fields: [addressId], references: [id], onDelete: Cascade)
    formHistories FormHistory[] @relation("customer")

    @@index([userId])
    @@map("customers")
}

model Address {
    id           String  @id @default(cuid())
    city         String
    state        String
    street       String
    zipcode      String
    number       String
    complement   String?
    neighborhood String

    customer Customer[]

    @@map("addresses")
}

model Form {
    id          String   @id @default(cuid())
    title       String
    description String?
    logoUrl     String?  @map("logo_url")
    enable      Boolean
    createdAt   DateTime @default(now()) @map("created_at")
    updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")
    updatedBy   String?  @map("updated_by")

    updatedByUser User?       @relation(fields: [updatedBy], references: [id], onDelete: SetNull)
    formGroups    FormGroup[]

    @@map("forms")
}

model FormGroup {
    id                  String   @id @default(cuid())
    title               String?
    position            Int
    isProfessionalField Boolean? @map("is_professional_field")
    formId              String   @map("form_id")

    form       Form        @relation(fields: [formId], references: [id], onDelete: Cascade)
    formFields FormField[]

    @@map("form_groups")
}

enum FieldTypes {
    TEXT
    TEXT_AREA
    CHECKBOX
    RADIO
    DATE
    SELECT
    MULTI_SELECT
    IMAGE
    DESCRIPTION
    SIGNATURE
}

enum FieldSize {
    SM
    MD
    LG
    XL
}

model FormField {
    id                  String     @id @default(cuid())
    name                String
    description         String?
    position            Int
    type                FieldTypes
    size                FieldSize
    typeOptions         Json?      @map("type_options")
    formGroupId         String     @map("form_group_id")
    isProfessionalField Boolean?   @map("is_professional_field")
    isRequired          Boolean    @map("is_required")

    formGroup    FormGroup      @relation(fields: [formGroupId], references: [id], onDelete: Cascade)
    fieldOptions FieldOptions[]

    @@map("form_fields")
}

model FieldOptions {
    id          String @id @default(cuid())
    name        String
    formFieldId String @map("form_field_id")

    formField FormField @relation(fields: [formFieldId], references: [id], onDelete: Cascade)

    @@map("field_options")
}

model FormHistory {
    id             String    @id @default(cuid())
    title          String
    description    String?
    logoUrl        String?   @map("logo_url")
    enable         Boolean
    isNamedForm    Boolean   @map("is_named_form")
    filledAt       DateTime? @map("filled_at")
    createdAt      DateTime  @default(now()) @map("created_at")
    createdBy      String?   @map("created_by")
    customerId     String?   @map("customer_id")
    professionalId String?   @map("professional_id")

    customer             Customer?             @relation(fields: [customerId], references: [id], onDelete: SetNull, name: "customer")
    professional         User?                 @relation(fields: [professionalId], references: [id], onDelete: SetNull, name: "professional")
    createdByUser        User?                 @relation(fields: [createdBy], references: [id], onDelete: SetNull, name: "createdByUser")
    formGroupsHistory    FormGroupHistory[]
    formHistoryResponses FormHistoryResponse[]

    @@map("forms_histories")
}

model FormGroupHistory {
    id                  String   @id @default(cuid())
    title               String?
    position            Int
    isProfessionalField Boolean? @map("is_professional_field")
    formId              String   @map("form_id")

    formHistory       FormHistory        @relation(fields: [formId], references: [id], onDelete: Cascade)
    formFieldsHistory FormFieldHistory[]

    @@map("form_groups_history")
}

model FormFieldHistory {
    id                  String     @id @default(cuid())
    name                String
    description         String?
    position            Int
    type                FieldTypes
    size                FieldSize
    typeOptions         Json?      @map("type_options")
    formGroupId         String     @map("form_group_id")
    isProfessionalField Boolean?   @map("is_professional_field")
    isRequired          Boolean    @map("is_required")

    formGroupHistory     FormGroupHistory      @relation(fields: [formGroupId], references: [id], onDelete: Cascade)
    fieldOptionsHistory  FieldOptionsHistory[]
    formHistoryResponses FormHistoryResponse[]

    @@map("form_fields_history")
}

model FieldOptionsHistory {
    id          String @id @default(cuid())
    name        String
    formFieldId String @map("form_field_id")

    formFieldHistory FormFieldHistory @relation(fields: [formFieldId], references: [id], onDelete: Cascade)

    @@map("field_options_history")
}

model FormHistoryResponse {
    id        String    @id @default(cuid())
    fieldId   String    @map("field_id")
    formId    String    @map("form_id")
    response  Json?
    filledAt  DateTime? @default(now()) @map("filled_at")
    createdBy String?   @map("created_by")

    formFieldHistory FormFieldHistory @relation(fields: [fieldId], references: [id], onDelete: Cascade)
    formHistory      FormHistory      @relation(fields: [formId], references: [id], onDelete: Cascade)

    @@index([formId])
    @@map("form_history_responses")
}
